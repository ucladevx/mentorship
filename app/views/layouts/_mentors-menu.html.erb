<% @mentors = User.where(usertype: 'm', online: true) %>
<% @conversations = Conversation.all %>
<script>
    let sender_id = -1;
    let recipient_id = -1;
    let conversationData = {};
    let usericonpath = '';
    let correctConversation = {};
    let newConversation = {};
    let oldConversation = {};
    let messagetosend = "";
    let checked = false;
    let doesConversationExist = false;

    function checkForUpdates() {
        oldConversation = newConversation;
        $.ajax({
            url: '/api/v1/conversation/' + oldConversation.id,
            dataType: 'json',
            success: function(data) {
                correctConversation = data;
                newConversation = correctConversation.conversations[0];
                if(JSON.stringify(oldConversation) === JSON.stringify(newConversation)) {
                } else {
                    let ol = document.getElementById("chatdiscussion");
                    if(newConversation.messages[newConversation.messages.length - 1].user_id == sender_id){
                        let messageBody = newConversation.messages[newConversation.messages.length - 1].body;
                        messageBody = messageBody.substring(0, messageBody.length - 1);
                        var li = document.createElement("li");
                        li.className = 'self';

                        let avatardiv = document.createElement("div");
                        avatardiv.className = 'avatar';

                        let useravatarimg = document.createElement("img");
                        useravatarimg.src = '<%= @user.image %>';

                        ol.appendChild(li);
                        li.appendChild(avatardiv);
                        avatardiv.appendChild(useravatarimg);

                        let messagesdiv = document.createElement("div");
                        messagesdiv.className = "messages";

                        let pbody = document.createElement("p");
                        pbody.innerHTML = messageBody;

                        let timemessage = document.createElement("datetime");
                        timemessage.datetime = "2009-11-13T20:14";
                        timemessage.innerHTML = newConversation.messages[newConversation.messages.length - 1].created_at;

                        li.appendChild(messagesdiv);
                        messagesdiv.appendChild(pbody);
                        messagesdiv.appendChild(timemessage);
                    } else {
                        let messageBody = newConversation.messages[newConversation.messages.length - 1].body;
                        messageBody = messageBody.substring(0, messageBody.length - 1);
                        var li = document.createElement("li");
                        li.className = 'other';

                        let avatardiv = document.createElement("div");
                        avatardiv.className = 'avatar';

                        let useravatarimg = document.createElement("img");
                        useravatarimg.src = usericonpath;

                        ol.appendChild(li);
                        li.appendChild(avatardiv);
                        avatardiv.appendChild(useravatarimg);

                        let messagesdiv = document.createElement("div");
                        messagesdiv.className = "messages";

                        let pbody = document.createElement("p");
                        pbody.innerHTML = messageBody;

                        let timemessage = document.createElement("datetime");
                        timemessage.datetime = "2009-11-13T20:14";
                        timemessage.innerHTML = newConversation.messages[newConversation.messages.length - 1].created_at;

                        li.appendChild(messagesdiv);
                        messagesdiv.appendChild(pbody);
                        messagesdiv.appendChild(timemessage);
                    }
                }
            },
            error: function() {
            }
        });
    }

    function queryOnce(sender, recipient) {
        $('ol').empty();
        $.ajax({
            url: '/api/v1/conversation',
            dataType: 'json',
            success: function(data) {
                conversationData = data;
                setupInitialChat();
            },
             error: function() {
                alert('error');
            }
        });
    }

    function sendMessage() {
        $.post("/api/v1/messages",
        {
            message: {
                body: messagetosend,
                conversation_id: newConversation.id,
                user_id: sender_id
            }
        });
    }

    function setupInitialChat() {
        if(!checked) {
            $('ol').empty();
            for(var i = 0, len = conversationData.conversations.length; i < len; i++){
                if((conversationData.conversations[i].sender_id == sender_id && conversationData.conversations[i].recipient_id == recipient_id) || (conversationData.conversations[i].sender_id == recipient_id && conversationData.conversations[i].recipient_id == sender_id)){
                    correctConversation = conversationData.conversations[i];
                    newConversation = correctConversation;
                    doesConversationExist = true;
                    break;
                }
            }

            $.ajax({
                url: '/api/v1/user/' + recipient_id,
                dataType: 'json',
                success: function(data) {
                    usericonpath = data.users[0].image;
                },
                error: function() {
                    alert('error getting user icon');
                }
            });

            if(!doesConversationExist) {
                let a = recipient_id;
                let b = sender_id;
                let convoid = <%= @conversations.length %>;

                alert(JSON.stringify(convoid));
                $.post("/api/v1/conversation/",
                {
                    conversation: {
                        recipient_id: a,
                        sender_id: b
                    }
                });
                correctConversation = {
                    id: convoid,
                    recipient_id: recipient_id,
                    sender_id: sender_id,
                    messages: [{
                        body: "Hello, how may I help you today?",
                        created_at: Date.now()
                    }]
                };
                newConversation = correctConversation;
            }

            let ol = document.getElementById("chatdiscussion");
            for(var i = 0, len = correctConversation.messages.length; i < len; i++){
                if(correctConversation.messages[i].user_id == sender_id){
                    let messageBody = correctConversation.messages[i].body;
                    var li = document.createElement("li");
                    li.className = 'self';

                    let avatardiv = document.createElement("div");
                    avatardiv.className = 'avatar';

                    let useravatarimg = document.createElement("img");
                    useravatarimg.src = '<%= @user.image %>';

                    ol.appendChild(li);
                    li.appendChild(avatardiv);
                    avatardiv.appendChild(useravatarimg);

                    let messagesdiv = document.createElement("div");
                    messagesdiv.className = "messages";

                    let pbody = document.createElement("p");
                    pbody.innerHTML = messageBody;

                    let timemessage = document.createElement("datetime");
                    timemessage.datetime = "2009-11-13T20:14";
                    timemessage.innerHTML = correctConversation.messages[i].created_at;

                    li.appendChild(messagesdiv);
                    messagesdiv.appendChild(pbody);
                    messagesdiv.appendChild(timemessage);
                } else {
                    let messageBody = correctConversation.messages[i].body;
                    var li = document.createElement("li");
                    li.className = 'other';

                    let avatardiv = document.createElement("div");
                    avatardiv.className = 'avatar';

                    let useravatarimg = document.createElement("img");
                    useravatarimg.src = usericonpath;

                    ol.appendChild(li);
                    li.appendChild(avatardiv);
                    avatardiv.appendChild(useravatarimg);

                    let messagesdiv = document.createElement("div");
                    messagesdiv.className = "messages";

                    let pbody = document.createElement("p");
                    pbody.innerHTML = messageBody;

                    let timemessage = document.createElement("datetime");
                    timemessage.datetime = "2009-11-13T20:14";
                    timemessage.innerHTML = correctConversation.messages[i].created_at;

                    li.appendChild(messagesdiv);
                    messagesdiv.appendChild(pbody);
                    messagesdiv.appendChild(timemessage);
                }
            }

            setInterval(checkForUpdates, 2000);
            checked = true;
        }
    }
</script>

  <div class="mentors-menu-container">
    <div class=open_navbar id="open_nav">
      <div class="open-chat-btn"><i class="fa fa-commenting" aria-hidden="true"></i></div>
    </div>
    <div class="menu" id="sidebar">
      <div class="mentors">
        <div class="mentor-header">
          <div class="nav_title list_show">
            <i class="fa fa-commenting" aria-hidden="true"></i>&nbspMentors Online
            <i class="remove icon remove-mentors-menu"></i>
          </div>
          <div class="nav_title chat_select_show">
            <span class="back">
              <i class="fa fa-arrow-left" aria-hidden="true"></i>&nbspBack
            </span>
            <i class="remove icon remove-mentors-menu exit-conversation-trigger-modal"></i>
          </div>
        </div>
        <% @mentors.each_with_index do |mentor, i| %>
        <div class="mentor-wrapper" id="mentorWrapper-<%= i %>">
          <div class="item mentor-trigger-modal" id="mentor-<%= i %>">
            <div class="mentor_pic">
              <img class="ui avatar image" src="<%= mentor.image %>">
            </div>
            <div class="mentor_name">
              <span><%= mentor.username %></span>
            </div>
            <div class="mentor_rating">
              <%= mentor.ratingscore %>&nbsprating
            </div>
          </div>
          <!-- Open chat with Mentor -->
          <div class="modal-container hide mentor-modal-container" id="mentorModal-<%= i %>">
            <div class="modal mentor-modal">
              <div class="modal-header">
                <div class="modal_mentor_rating">
                  <h4><%= mentor.ratingscore %>&nbsp<i class="fa fa-star" aria-hidden="true"></i></h4>
                </div>
                <div class="modal_mentor_pic">
                  <img class="ui circular image" src="<%= mentor.image %>">
                </div>
                <div class="modal_mentor_char">
                  <div class="modal_mentor_name">
                    <h2><%= mentor.username %></h2>
                  </div>
                </div>
              </div>
              <div class="modal-field-content">
                <div class="modal_mentor_bio">
                  &nbsp&nbsp&nbsp&nbsp<%= mentor.description %>
                </div>
                <div class="chat_modal">
                  <div class="ui buttons">
                    <button class="ui positive button modal_mentor_accept" id="<%= mentor.id %>">Accept</button>
                    <script>
                    $("button").click(function() {
                        recipient_id = parseInt(this.id); // or alert($(this).attr('id'));
                        sender_id = <%= current_user.id %>;
                        queryOnce(sender_id, recipient_id);
                    });
                    </script>
                    <div class="or"></div>
                    <button class="ui button modal_mentor_decline">Cancel</button>
                  </div>
                </div>
              </div>
            </div>
            <div class="overlay" onClick="hideModal('mentor')"></div>
          </div>
        </div>
        <% end %>
      </div>
      <div class="chatbox">
        <div class="chat">
          <ol class="discussion" id="chatdiscussion">
          </ol>
        </div>
        <div class="send_message">
          <textarea id="messagebox" class="messagebox" rows="2" cols="34"></textarea>
          <script>
            $(".messagebox").on('keyup', function(e) {
                if(e.keyCode == 13) {
                    messagetosend = document.getElementById("messagebox").value;
                    document.getElementById("messagebox").value = "";
                    sendMessage();
                }
            });
          </script>
        </div>
      </div>
    </div>
    <div class="modal-container hide exit-conversation-modal-container" id="exit-conversation">
      <div class="modal mentor-modal">
        <div class="modal-header">
          <div class="modal_mentor_pic">
            <%= image_tag("shrink.jpg", :class => "ui circular image")%>
          </div>
          <div class="modal_mentor_char">
            <div class="modal_mentor_name">
              <h2>Austin Lee</h2>
            </div>
          </div>
        </div>
        <div class="modal-field-content">
          <div class="modal_mentor_bio">
            Exit conversation with Austin Lee?
          </div>
          <div class="chat_modal">
            <div class="ui buttons">
              <button class="ui negative button exit-conversation-accept">Exit</button>
              <div class="or"></div>
              <button class="ui button exit-conversation-decline">Cancel</button>
            </div>
          </div>
        </div>
      </div>
      <div class="overlay" onClick="hideModal('exit-conversation')"></div>
    </div>
    <div class="modal-container hide rate-mentor-modal-container" id="rate-mentor">
      <div class="modal mentor-modal">
        <div class="modal-header">
          <div class="modal_mentor_pic">
            <%= image_tag("shrink.jpg", :class => "ui circular image")%>
          </div>

          <div class="modal_mentor_char">
            <div class="modal_mentor_name">
              <h2>Austin Lee</h2>
            </div>
          </div>
        </div>
        <div class="modal-field-content">
          <div class="modal_mentor_bio">
            Rate Austin Lee
          </div>
          <div class="chat_modal">
            <div class="ui buttons">
              <button class="ui positive button rate-modal-accept">Rate</button>
              <div class="or"></div>
              <button class="ui button rate-modal-decline">Cancel</button>
            </div>
          </div>
        </div>
      </div>
      <div class="overlay" onClick="hideModal('rate-mentor')"></div>
    </div>
  </div>
